import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import addUserApi, { addUserInterestsApi, sendEmailApi, uploadUserProfilePicApi } from './AddUserApi';

const initialState = {
  userDetails:{

  },
  location:{

  },
  Interests:[

  ],
  profilePicUrl:null,
  profileColor : null,
};
export const addUserAsync = createAsyncThunk(
  'user/addUserAsync',
  async (data) => {
    const res = await addUserApi(data);
    return res;
  }
);
export const addUserInterestsAsync = createAsyncThunk(
  'user/addUserInterests',
  async (data) => {
    const res = await addUserInterestsApi(data);
    return res;
  }
);
export const uploadUserProfilePicAsync = createAsyncThunk(
  'user/uploadUserProfilePic',
  async (data) => {
    const res = await uploadUserProfilePicApi(data);
    return res.url;
  }
);
export const sendEmailAsync = createAsyncThunk(
  'user/sendEmail',
  async (data) => {
    const res = await sendEmailApi(data);
    return res.url;
  }
);



export const addUserSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.countValue += 1;
    },
    addLocation: (state, action) => {
      state.location = action.payload;
    },
    addColor: (state, action) => {
      state.profileColor = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addUserAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(addUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetails = action.payload

      })
      .addCase(addUserInterestsAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(addUserInterestsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.Interests = action.payload

      })
      .addCase(uploadUserProfilePicAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(uploadUserProfilePicAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.profilePicUrl = action.payload

      })
      .addCase(sendEmailAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(sendEmailAsync.fulfilled, (state, action) => {
        state.status = 'idle';
      })
  },
});

export const { increment,addLocation,addColor } = addUserSlice.actions;

export default addUserSlice.reducer;